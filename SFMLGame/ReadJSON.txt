//Read JSON

#include"json.hpp"
using json = nlohmann::json;

void Scene_Zelda::loadLevelJSON(const string& filename)
{
	entityManager = EntityManager();

	ifstream fin;
	fin.open(filename);
	json j;
	fin >> j;

	for (int i = 0; i < j["entities"].size(); i++)
	{
		Entity* e = entityManager.addEntity(j["entities"][i]["tag"]);
		string animationName = j["entities"][i]["components"][1]["name"];
		e->add<CAnimation>(game->getAssets().getAnimation(animationName), true);
		if(animationName == "Black")
			teleportTiles.push_back(e);
		e->add<CTransform>(Vec2f(j["entities"][i]["components"][0]["x"], j["entities"][i]["components"][0]["y"]), Vec2f(j["entities"][i]["components"][0]["scaleX"], j["entities"][i]["components"][0]["scaleY"]));
		if (j["entities"][i]["components"][2]["exists"])
		{
			e->add<CBoundingBox>(Vec2f(j["entities"][i]["components"][2]["x"], j["entities"][i]["components"][2]["y"]), j["entities"][i]["components"][2]["move"], j["entities"][i]["components"][2]["vision"]);
		}
		if (j["entities"][i]["components"][3]["exists"])
		{
			e->add<CHealth>(j["entities"][i]["components"][3]["max"], j["entities"][i]["components"][3]["current"]);
		}
		if (j["entities"][i]["components"][4]["exists"])
		{
			e->add<CDamage>(j["entities"][i]["components"][4]["damage"]);
		}
		if (j["entities"][i]["components"][5]["exists"])
		{
			e->add<CInput>(j["entities"][i]["components"][5]["speed"]);
		}
		if (e->tag() == "player")
			e->add<CState>();
	}
}